스프링의 개요

1. 프레임워크
	완성된 소프트웨어가 아니라 어떤 문제를 해결하기 위해서 잘 설계된 미완의 모듈로 spring같은 경우 
	자바 개발자들이 공통으로 사용할만한 기능을 미리 정의해 놓은 모듈이다
											   ----
											   코드를 모아놓은 라이브러리
											   
	(해결해야 하는 문제 : 내가 개발하고 싶은 시스템 - 쇼핑몰, 예약관리시스템, 인터넷뱅킹..)
	재사용이 가능한 모듈이며 일반적으로 프레임워크를 통해서 개발하는 시스템의 공통모듈은 프레임워크에서 제공
	
	- 개발자가 처리해야하는 대부분의 작업을 프레임워크 내부에서 처리해 주므로 개발을 위한 시간과 노력을
	    절약할 수 있다
	- 신뢰있는 프로그램을 개발할 수 있다
	- 개발자간의 의사소통이 활발
	- 주어진 메뉴얼대로 개발하면 된다 즉, 프레임워크 내부에서 제공하는 정해진 모듈을 사용해서 개발하면 된다
	
2. spring의 특징
	- 경량시스템(포함된 라이브러리가 거의 1MB가 넘지 않기 때문에 가볍다)
	- POJO(Plain Old Java Object)로 개발하기 때문에 작성하는 OOP의 특징을 적용하여 개발하면 된다
	- spring프레임워크 내부에 IoC컨테이너를 포함하고 있다
	  1) 의존성을 주입
	  	  시스템 내부(내가 만든 프로그램)에서 사용하는 객체를 직접 생성해서 사용하지 않고
	  	  스프링 내부에 존재하는 컨테이너를 통해 필요한 곳에서 사용할 수 있도록 전달받아 사용한다
	  	 				 -------
	  	 				 스프링 내부에서 라이브러리로 존재 
	  	 				 spring-beans-4.2.4.RELEASE.jar
	  	 				 spring-context-4.2.4.RELEASE.jar
	  	 				 
	  2) 스프링 내부의 IoC컨테이너를 통해 객체를 관리하면서 커플링을 낮출 수 있다
	  3) 스프링 내부에는 발생할 수 있는 다양한 모든 경우에 반응할 수 있도록 많은 컨테이너 클래스를 제공한다
	  
3. spring 컨테이너의 종류

	BeanFactory : 개발자가 객체를 요청하는 시점에 객체를 생성한다
		^
		|
	ApplicationContext : 컨테이너 객체가 생성될때 전달된 xml안에 정의된 모든 Bean을 생성하고 
		^				  의존성 주입을 처리한다
		|
	WebApplicationContext
	
4. 의존성주입
	1) DL (Dependency Lookup)
		=> 컨테이너가 만든 객체를 getBean메소드를 통해 가져와서 사용하는 것
	2) DI (Dependency Injection)